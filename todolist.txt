+Перевести систему на UTF-8
+Система хранения полей в .ini файлах. Загрузка fileds/catalog.ini.
+Кавычки в ini-перечислениях
+Хранение левого меню в отдельном init-файле.
Трёхуровневая система пользоваетелей (направление, группа, пользователь)
+Роутеры в ini-файле
+foreach и функции
+Авторизация разработчика/администратора

Привязывание регулярного выражения в функции
Например:
[A-Z][a-z0-9]+ -> activerecord
property_[a-z0-9_] -> property


префиксы для таблиц определённого модуля
/catalog/1
/anothercatalog/1
a3_anothetcatalog_catalog
a3_catalog_catalog


Если всё перенаправляется классу (с большой буквы), то случается Чудо.
Например,
/users/ -> Users.php
либо 
Users.class.php

Все функции внутри автоматически становятся методами класса User и только
Во втором случае просто используется класс

Готовые модули для каждого из возможных Web 2.0 проектов

d()->Users
d("Users") одно и тоже

Модель, вид, контроллер

Модель - функции для работы с данными, функции вспомогательные, опции. ActiveRecord User->find()
Контроллер - функция, которая срабатывает на какой-либо URL. Вызывает view, получает данные на основе опций.
Вид - HTML-шаблон.

/catalog/1

function get_order{}
срабаывает когда пришёл $_GET['order'];

/catalogs/index     REST:catalog

REST_catalog  - функция, которая смотрит GET и POST запросы и вызывает подфункции, ежели они есть.

Консоль: отладка PHP создание баз данных создание моделей, вспомогательные операции (phpinfo, chmod), бекапы, создание и развёртывание проектов и так далее.


ORM: Если переменная начинается с большой буквы, то она, вероятно, генератор ORM-объекта
ORM: получение свойств и передача их в шаблон
ORM: получение списка в виде переменной и передача его в шаблон
ORM: фильтрация, сортировка
ORM: валидация
/3/2/1
/users/ainu/add/comments/12
/catalog/news/news/12/23
$_URL['3'];

$_URL['news'];
url('news')

$_URL['4'];
/user/23
/news/23
/catalog/23
/catalog/goods/23
/users/ainu
$name

find(array('user_id'=>true))
 

/users/34/comments/32

/users/ainu

/about
/

$user=>d()->Users->find();
$comments=>d()->Comments->find();

$user=>d()->Users->find(url('users'));
/goods/23
$goods=>d()->Goods->find(url('goods'));

<input name="user[title]">
<input name="user[password]">

Users->create($_POST[user])
 


<input name="good[categories][2]" type="checkbox">Аксессуары
<input name="good[categories][3]" type="checkbox">Новинки
<input name="good[categories][5]" type="checkbox">Велосипедные насосы
<input name="good[categories][6]" type="checkbox">Спортивное снаряжение
<input name="good[categories][7]" type="checkbox">Туристическое снаряжение


Каждая форма обязана уметь делать тоже самое, но в Ajax итемплетации

Четыре элемента
/news/   (list) select
/news/add   form
/news/1/edit  form
/news/1     view select   

/news/sort/title/page/23
/news/page/23/sort/title

news.php?sort=title&page=1
news.php?page=1&sort=title

$_get['page+
url('page')-=p[]2l;

Адреса:
/catalog/books/russian/fantasticks/oldi
/catalog/create/red/big/12
/catalog/create/green/small/14
/catalog/sanyo/news
/catalog/last

Параметры
/news/page/1/order/date
/register/user/ainu/step/2

Смешанные
/catalog/last/order/title
/catalog/user/ainu/approved



Статические
/about/company/now
/contacts/nijnijnovgorod/director

 
url(2 [,1])
url('user',0)
url('page',2)
url('page',-1)

/?catalog=2
/?news
/?news=2&edit



ini-файлы, редактируемые администратором.
Удаление объектов двумя способами (иконка/админка)
Псевдосвойства, начиная от приписанных и заканчивая префиксами свойств, например magic_title
Псевдосвойства: проверка на случай, если и переменная, и фрагмент отсуствуют
Кеширование в getFunctionAlias
shablonize: сделать массив str_replace-ов для скорости и поддержки плагинов
<function fields>	</function> Не срабатывает. Игнорится. Создаёт функцию-фрагмент 
Приписывание необязательного параметра namespace для loadandparseini
Функция (команда) специального подавления последнего вывода.
Свойство Parent, связанные списки, подменю
Редактирование верхнего меню админки
Предусмотреть папки в tpl (для админки, для того, чтобы не коммитить вёрстку конкретного проекта (например, вывод логики проекта в отдельную папку, вывод макета/вёрстки проекта - во вторую, админку - в третью, общие классы - в четвёртую)
Почистить вёрстку admin.html
Логика на основе переменных и массивов. Переменные редактируются администратором, факт их инициализации происходит при совпадении URL. Таким образом, администратор может создать исключение для правила URL и задать исключению текстовую информацию.
Отказ от eval при вызове, использование прекомпиляции либо eval('function name (){} ');
Предусмотреть откат и нахождение изначальных значений при переопределении тегом fragment одноимённого файла
fragment-локальный
то есть внутри функции admin либо становятся доступны фрагменты, объявленные внутри этой функции, либо допускается запрос admin_row, admin_list, admin_formtable
+фрагменты объявляются автоматически при заходе в родительскую функцию.
before_, after_, around_, replace_, action_, (обрабатывает POST, делает перенаправления, если вернул false, то не продолжать дальнейший вывод)
override перед вызовом функции как таковой(?). Например, для хранения переопределений в самой базе данных.
Правила в override (какой шаблон на что меняем)
Ruby-style именования. Например, если мы запрашиваем "user" при наличии "users", то система должна понять, что от неё хочет получить человек.
override в четвёртом столбце полей редактирования (добавление разного рода кнопок, переключателей и т.д.).
override в списках редактирования должен поступать умно.
Параметры в foreach
Свои списки в админке (в т.ч используя псевдосвойства)
admin/приемник (add[], edit[]), обработчик + обычные формы в админке
<if array> (exists)
<namespace user>
function property_()
namespace_user() получение данных для namespace-а
url()
{user.list}
Прозрачная и необязаельная концепция шаблонов с вёрсткой (скины, макеты и т.д.). Должны прозрачно работать как с шаблонами для основного макета (main/content), так и с подшаблонами (catalog_good.tpl.html) и с комбинациями header/footer
_default.html внутри папки mod_admin подразумевает имя файла admin_default.html
admin_ объявляет префикс admin_
tpl_green / top_shiny
{{korzina:overridetemplate=newkorzina.tpl.html}}

admin/list/text/123  -- список объектов дочерних к 123, дочерних по свйоству parent
admin/te

edit_wiki_button (wiki.id)
add_user_button (wiki)
edit_user_button


магические свойства (при редактировании объекта)
url - адрес
parent - родительская страница (объект)
foreach для
<fragment options.url>
а также
{options.url}
{user.adress}
{{user.add}}
{{database.write}}

{{getdata}} - попытка получить данные автоматически.


Авторизация пользователя
1. я залогинен или нет? if(iam('admin'))  или isset  session admin/developer/user
2. вывод формы авторизации (сообщения: нотис)
3. авторизация (обработка POST), проверка на правильность, указывание переменной $_SESSION['login']

Роутер, обрабатывающий действия, пришедшие из POST, и направляющий их далее.
Всегда делает header(location)

модель содержит функции вычисления массивов (например, меню)


Модель загружается вся.
Необходимо загружать модели только для необходимых модулей (администратор, импорт и так далее)
С другой стороны, functions тоже загружалась вся.
Модель - объявления функций для работы с данными и активными действиями (послать письмо, зарегистрировать пользователя)
Контроллер - код, вызывающий эти функции и передающий дальше в вид





TODO: функция поглотить()
допустим массив array $users:
$users[0].username='ainu';
$users[1].username='anonymous';
$users[1].username='cooler';
	
foreach users as user {
	поглотить (user)
	print $do->username
}
Аналогом функции является одна строка
foreach($user as $subkey=>$subvalue) {
	$this->datapool[$subkey]=$subvalue;
}

Делать прозрачные поиски например
$a=1;
print $this->a; должно выводить 1

TODO:
уровневая система пользователей и групп
1. Направление пользователей (разработчики, администраторы контента сайта, пользователи сайта, продавцы.
или продавцы, покапатели, администраторы)
Каждое направление пользователей имеет свой флаг залогиненности, и разные контроллеры, и разное место хранения списка пользователей
Человек может иметь несколько аккаунтов в разных направлениях (он может быть администратором сайта и покупателем).

2. Группы. Каждая группа имеет свои права
Каждый пользователь может состоять в нескольких группах.

3. Пользователь. Каждый пользователь имеет логин, пароль, группу.

СИстема редактирования инишек администратором
Загрузка всех ini файлов.
!!!!!!!!!!т.е. при загрузке fileds загружаются filelds.*.ini //альтернативно!!!!!

1. иницаизизцаия опций конкертного проекта:
содержит поля:
текстовое описание - тип поля

тип поля выбирается из большо йбазы существующих полей

\
wiki
создание дерева из информаионных страниц

загрузка и инициализация функций из определённых файлов. при загрузке функции сохранять её местоположение, затеп при первом запросе сразу искать в файле. Если не найдено, сканировать всё.

В случае проблем с выводом списка в админке (например, сложный каталог), этот список не выводится, но созадётся шаблон для редактирования. ПОльзователь щёлкает по иконке редактирования, редактирует страницу, попадает обратно на страницу.






/catalogs/index     REST:catalog
Catalog_index
Catalog_index

_index
_show
_new
_add
_replace

mod_User
User_index


/users/ User



Дерево:
21/42/22
123
12/12
nil


link_for_admin_edit




