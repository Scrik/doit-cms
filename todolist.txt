<?php

Трёхуровневая система пользоваетелей (направление, группа, пользователь)



префиксы для таблиц определённого модуля
/catalog/1
/anothercatalog/1
a3_anothetcatalog_catalog
a3_catalog_catalog


Если всё перенаправляется классу (с большой буквы), то случается Чудо.
Например,
/users/ -> Users.php
либо
Users.class.php

Все функции внутри автоматически становятся методами класса User и только
Во втором случае просто используется класс

Готовые модули для каждого из возможных Web 2.0 проектов

/catalog/1


/catalogs/index     REST:catalog

REST_catalog  - функция, которая смотрит GET и POST запросы и вызывает подфункции, ежели они есть.

Консоль: отладка PHP создание баз данных создание моделей, вспомогательные операции (phpinfo, chmod), бекапы, создание и развёртывание проектов и так далее.


$user=>d()->Users->find();
$comments=>d()->Comments->find();

$user=>d()->Users->find(url('users'));
/goods/23
$goods=>d()->Goods->find(url('goods'));


<input name="good[categories][2]" type="checkbox">Аксессуары
<input name="good[categories][3]" type="checkbox">Новинки
<input name="good[categories][5]" type="checkbox">Велосипедные насосы
<input name="good[categories][6]" type="checkbox">Спортивное снаряжение
<input name="good[categories][7]" type="checkbox">Туристическое снаряжение


Каждая форма обязана уметь делать тоже самое, но в Ajax implements

Четыре элемента
/news/   (list) select
/news/add   form
/news/1/edit  form
/news/1     view select

/news/sort/title/page/23
/news/page/23/sort/title

news.php?sort=title&page=1
news.php?page=1&sort=title




Статические
/about/company/now
/contacts/nijnijnovgorod/director


/?catalog=2
/?news
/?news=2&edit


ini-файлы, редактируемые администратором.
Псевдосвойства: проверка на случай, если и переменная, и фрагмент отсуствуют
Приписывание необязательного параметра namespace для loadandparseini
Функция (команда) специального подавления последнего вывода.
Свойство Parent, связанные списки, подменю
Редактирование верхнего меню админки
Логика на основе переменных и массивов. Переменные редактируются администратором, факт их инициализации происходит при совпадении URL. Таким образом, администратор может создать исключение для правила URL и задать исключению текстовую информацию.
before_, after_, around_, replace_, action_, (обрабатывает POST, делает перенаправления, если вернул false, то не продолжать дальнейший вывод)
override перед вызовом функции как таковой(?). Например, для хранения переопределений в самой базе данных.
Правила в override (какой шаблон на что меняем)
Rails-style именования. Например, если мы запрашиваем переменную "user" при наличии "users", то система должна понять, что от неё хочет получить человек.
override в четвёртом столбце полей редактирования (добавление разного рода кнопок, переключателей и т.д.).
override в списках редактирования должен поступать умно.
Параметры в foreach
Свои списки в админке (в т.ч используя псевдосвойства)
admin/приемник (add[], edit[]), обработчик + обычные формы в админке
<if array> (exists)
<namespace user>
function property_()
namespace_user() получение данных для namespace-а
Прозрачная и необязаельная концепция шаблонов с вёрсткой (скины, макеты и т.д.). Должны прозрачно работать как с шаблонами для основного макета (main/content), так и с подшаблонами (catalog_good.tpl.html) и с комбинациями header/footer
_default.html внутри папки mod_admin подразумевает имя файла admin_default.html
admin_ объявляет префикс admin_
tpl_green / top_shiny


admin/list/text/123  -- список объектов дочерних к 123, дочерних по свйоству parent

edit_wiki_button (wiki.id)
add_user_button (wiki)
edit_user_button


магические свойства (при редактировании объекта)
url - адрес
parent - родительская страница (объект)
foreach для
<fragment options.url>
а также
{options.url}
{user.adress}
{{user.add}}
{{database.write}}

{{getdata}} - попытка получить данные автоматически.


Авторизация пользователя
1. я залогинен или нет? if(iam('admin'))  или isset  session admin/developer/user
2. вывод формы авторизации (сообщения: нотис)
3. авторизация (обработка POST), проверка на правильность, указывание переменной $_SESSION['login']

Роутер, обрабатывающий действия, пришедшие из POST, и направляющий их далее.
Всегда делает header(location)

модель содержит функции вычисления массивов (например, меню)


Модель загружается вся.
Необходимо загружать модели только для необходимых модулей (администратор, импорт и так далее)
С другой стороны, functions тоже загружалась вся.
Модель - объявления функций для работы с данными и активными действиями (послать письмо, зарегистрировать пользователя)
Контроллер - код, вызывающий эти функции и передающий дальше в вид





TODO: функция поглотить()
допустим массив array $users:
$users[0].username='ainu';
$users[1].username='anonymous';
$users[1].username='cooler';

foreach users as user {
	поглотить (user)
	print $do->username
}
Аналогом функции является одна строка
foreach($user as $subkey=>$subvalue) {
	$this->datapool[$subkey]=$subvalue;
}


TODO:
уровневая система пользователей и групп
1. Направление пользователей (разработчики, администраторы контента сайта, пользователи сайта, продавцы.
или продавцы, покапатели, администраторы)
Каждое направление пользователей имеет свой флаг залогиненности, и разные контроллеры, и разное место хранения списка пользователей
Человек может иметь несколько аккаунтов в разных направлениях (он может быть администратором сайта и покупателем).

2. Группы. Каждая группа имеет свои права
Каждый пользователь может состоять в нескольких группах.

3. Пользователь. Каждый пользователь имеет логин, пароль, группу.

СИстема редактирования инишек администратором
Загрузка всех ini файлов.
!!!!!!!!!!т.е. при загрузке fileds загружаются filelds.*.ini //альтернативно!!!!!

1. иницаизизцаия опций конкертного проекта:
содержит поля:
текстовое описание - тип поля

тип поля выбирается из большо йбазы существующих полей

\
wiki
создание дерева из информаионных страниц

загрузка и инициализация функций из определённых файлов. при загрузке функции сохранять её местоположение, затеп при первом запросе сразу искать в файле. Если не найдено, сканировать всё.

В случае проблем с выводом списка в админке (например, сложный каталог), этот список не выводится, но созадётся шаблон для редактирования. ПОльзователь щёлкает по иконке редактирования, редактирует страницу, попадает обратно на страницу.






mod_User
User_index


/users/ User



Дерево:
21/42/22
123
12/12
nil


link_for_admin_edit


Параметры опций AR
:uniq
:validate
:readonly



Цепочки запускаемых функций
clients_model.php

clients_router.tpl.html

clients_default.html
d()->client.find();

clients_default.tpl.html
/clients/     clients_index.html clients_index.tpl.html


function clients_show()
{
	d()->client = d()->Client->find(url('clients'));
}

<div class="magic users">

</div>


Относительные, влияющие на очередь, вызываем изнутри очереди
+set_next_chain
remove_next_chain
+stop_next_chains
insert_next_chain
repeat_next_chain
replace_next_chain

Именные, ждущие имени, вызываемые снаружи очереди:
run_after_chain
replace_chain
remove_chain
insert_after_chain
insert_before_chain
insert_at_end_of_chain

Управление url
set_virtual_url


Хелперы

edit_button(page)


+ class User extends ActiveRecord {}


Прослойка валидации
принимает на себя проверки на уникальносьть безопасность связь таблиц и так далее


<which user>


</which>

+Обеспечить совместимость вызова функций
Тонкое место - роутер



$user->razdels_of_posts


$post->urls_of_comments


Good->catalogs_of_gfcomments

Good->catalogs


Хранение кешированной структуры базы данных (миграции).



Post
id user_id razdel_id



$catalogs = $good->gconnects->catalogs

$user->goods //только когда один  [12,34,23]
$good->gcconnects //только когда один  [12,34,23]  -массив объектов класса gconnetc

foreach ($good->gcconnects as $gconnect)
catalog = $gconnect->catalog
$good->catalogs_over_gcconnect

$good->catalogs
1. ищем поле catalogs_id в текущих данных
2. ищем поле good_id в таблице catalogs
	Если 2, то
	1. получаем массив $good->catalogs из всех, где good_id=id в таблице catalogs
3. ищем goods_to_catalogs

	Если 3, то:
	1. получаем массив $good->goods_to_catalogs
	2. определяем единственную форму слова (catalog), получем массив catalog каждого из $good->goods_to_catalogs
		1. смот
	3. возвращаем полученный массив




validate() - возвращает true или false
errors() - возвращает ошибки



	Администратор сайта может редактировать ini-файлы.
	Администратор сайта может добавлять свои, дополнительные поля
	Администратор сайт[а может определять их обязательность
	Администратор сайта может определять дополнительные требования (уникальность, необходимость подтверждения, возможные варианты, тип)


		{{button_for 'send_email', 'value'=>'отправить емейл'}}
		{{link_for 'send_email', 'value'=>'отправить емейл'}}


	проверка
например action на удаление объекта может запустить только администратор
/ action_sendemail         onlyadmin action_sedemail


условный роутер

is_admin()    button	superbutton
true	link	superlink



123  button superbutton
900  button superlist
true button adminium

/httygb
1
2
3
true

1. если при поиске URL наткнулись на функцию, вернувшую число, то в дальнейшем игнорируем URL
2. если при поиске URL наткнулись на *, то останавливаем поиск
3. если при поиске URL наткнулись на функцию, вернувшую true, то останавливаем поиск

*
userfunc = true
userfunc = 12

userfunc()
{
	return preg_match('/[0-9*/sd627F^*sd{}]/',$request_uri);
}


система автоматичесого определения полей при редактировании на основе базы данных
система автоматичесого определения дчеорних элементов при выводе списка на основе базы данных


[structure]
[users]
title
text
login


videorolik->video->url

[posts]
type:topic,translate,link,opros,videorolik
title
text
user_id
catalog_id
post_id
video_id

[voproses]
title
opros_id


[videos]
url




user.comments = commentable.comments

commentable.type
user page admin

comment commentable.id

sushnost.type=user
sushnost.magaproperty=ХАХА

автоматическая расстановка внешних ключей


fill_clients_from_url_1
fill_client_by_name_from_url_2
fill_clients_by_client_id_from_url_2




Валидатор проверяет надичие небезопасных INPUT параметров, и не пропускает их до создания строки
Если в опциях есть параметр unsafe, он допускается, но не передаётся в создаваемый объект
Если в опциях есть параметр safe, он допускается, при этом поля, помеченные как safe помещяются в ассоциативный массив ключ-значение

<div id="client_12">

</div>






Массовые присваивания - это плохо, потому что всгда нужны проверки по каждому полю, что даёт уязвимость при невнимательности.


класс nullstring, всгда возвращающий пустую строку.



afterthis - аналог override


к каждому контроллеру привязан шаблон этого контроллера
Например, clients_index(), client_index.html

В файлах с расширением HTML могут находиться ТОЛЬКО шаблоны.
ПОэтому все .html



Примеры шаблонов:
1. {{main}}
main.html
{{footer}}
footer.html


2.
clients_show()
clients_show.html

3. send_email()



1. Если есть две сущности: функция и шаблон одновременно, то шаблон переименовывается в tpl, и добавляется в очередь при вызове основной функции в качестве виртуального свойства.
2. Если есть только одна сущность: шаблон, то шаблон не переименовывается, при вызове одноимённой функции рендерится шаблон
3. Если есть только одна сущность: функция, то шаблон игнорируетсяЮ при вызове одноимённой функции срабаотывает сама функция


Если при вызову функции сама функция отсуствует, то вызывается её tpl - аналог

1. файл "users#close.html"
2. файл "users.func.php"
class users
{
	function show()
	{
		d($this)->close();
	}
}

инициализация шаблона только при запросе (shablonize и $_fragmentslist)


if (validate('sendemail')) {
	sendemail()
} else {
	print d()->fosv_tpl();
}


runaction('client#update');
runaction('mailer');

if (validate('clients_update')) {
	Client->update();
} else {
	print d()->client_update_tpl();
}



if (validate('clients_search')) {
	Client->order();
}


db()->query();




wiki система
1. регистрация авторизация, карма
2. аккаунты, гостевой анонимный доступны
3. зашифрованные страницы и разделы
4. каждый может редактировать разделы и страницы
Страница шифруется при помощи пароля, введённого ранее для доступа в раздел.


+h
t
+d
db
+ar
m //markdown
s //show, показывает объект
? //разворачиваем массив


Длинные:
jevix (md5, база данных для кеширования)


=======

Рассмотреть записи вида:
{{clients.show}}
/clietns//   content    clients.edit


http://guides.pagodabox.com/general/url-rewrites
http://doit-cms.pagodabox.com/docs/docs.php?file=recepies
Добавить .box

{foreach 'users', 'user', 'showuser'}



Модуль numeric_helpers
d(time)->russian_time()
d(5)->times(d()->admin())
d(5)->years->ago



сделать параметры шаблонов deprecated


{block controller=news.lastnews}.